# Nombre del flujo de trabajo visible en la interfaz de GitHub Actions
name: CI/CD Pipeline

# Evento que dispara el flujo de trabajo: cada vez que se hace un 'push' al branch 'main'
on:
  push:
    branches:
      - main

# Define los trabajos (jobs) que se ejecutar√°n en este flujo de trabajo
jobs:
  # Nombre del primer trabajo: 'build-and-deploy'
  build-and-deploy:
    # El trabajo se ejecutar\u00e1 en la \u00faltima versi\u00f3n de Ubuntu disponible
    runs-on: ubuntu-latest

    # Define los pasos (steps) que conforman el trabajo
    steps:
      # Paso 1: Checkout del repositorio
      # Descarga el c\u00f3digo del repositorio en el que se ejecuta el flujo de trabajo
      - name: Checkout repository
        uses: actions/checkout@v2

      # Paso 2: Configurar Docker Buildx
      # Habilita funcionalidades avanzadas de Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Paso 3: Iniciar sesi\u00f3n en Docker Hub
      # Usa las credenciales guardadas como 'secrets' en GitHub
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Paso 4: Construir y subir la imagen de Docker
      # Construye la imagen y la sube autom\u00e1ticamente a Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/despliegue-a-produccion:latest

      # Paso 5: Desplegar en Render.com
      # Utiliza la API de Render para iniciar un despliegue
      - name: Deploy to Render
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
